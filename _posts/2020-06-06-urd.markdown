---
layout: post
title:  "Urd - Part 1"
date:   2020-06-01 00:00:00
categories: example
---

A dataset that can be appended when new files arrive.  Automatic.


A set of files.  It is common that they have some order, perhaps a
timestamp if they are log files...

Urd timetamps could be either an integer, a timestamp down to micro
second resolution, or a combination of both.



First, to import a set of files in date order.  One dataset per file,
all datasets are chained, so that we can reach all data from the last
dataset.

Assume that we have a list of tuples containing a timestamp and a
filename for all files that we want to import.  We've probably gotten
this list from some `glob` statement or similar.


Importing reads a CSV-file and converts it to an Acce

```
files = (
                ('2020-06-01T19:00:00', 'file1.csv'),
                ('2020-06-01T21:30:00', 'file2.csv'),
	        ...
	)
```



```python
1: def main(urd):
2:         key = 'import'
3:         last_import = urd.peek_latest(key).timestamp
4:         for ts, filename in files:
5:                 if ts > last_import:
6:                         urd.begin(key, ts)
7:                         previous = urd.latest(key).joblist.get(-1)
8:                         urd.build('csvimport', filename=filename, previous=previous)
9:                         urd.finish(key)
```

Explanation:

- We start with line 8.  This is the line that does the actual
  importing of the file.  The method needs to know the name of the
  file to import, and also, since we want the datasets to be chained,
  we provide a `previous` that points to the previous import.

- Then, lines 6 and 9 defines an urd session for this import.  The
  session is associated with a key and a timestamp.  The key binds the
  import of all the files together to an urd _list_, and the timestamp
  is used to identify individual import jobs.

- Line 7 finds the reference to the previous import job.  This is done
  by asking urd for the latest job that is associated with the given
  key.  If there is no such job, `previous` will be set to `None`.
  (See below for explanation of the `get(-1)`.  
  Note that `urd.latest` instructs urd "under the hood" to attach this
  dependency to the urd session.  Therefore, it can only be issued inside
  a running urd session.


This concludes the actual urd session and importing, in addition

- line 3, early in the script, we ask urd for the latest import so
  far.  This will be our starting point.  (We cannot use `urd.latest`
  since we are not recording an urd session.  Instead we use
  `urd.peek_latest`, which is the same thing, but without dependency
  recording.)

- lines 4 and 5 loop over all files and timestamps, and issues an urd
  session with import _only for those files that it has not imported
  on a previous run_.


## Running the build script

### Investigating Urd databsd

Now, let us investigate what has been stored in the urd database.


First, let us list all the urd lists.
```
% ax curl list
[
    "<user>/import",
]
	
```

There is only one urd list, named `import`, recorder.  Let us list all
its timestamps:

```
% ax curl <user>/import/since/0
[
    "2020-06-01T19:00:00",
    "2020-06-01T21:30:00",
    ...
]
```

(We asked for all timestamps are larger than '0'.  All valid
timestamps sort after zero.  Replace '0' by an actual timestamp to see
only more recent entries.)

We can look at a single entry like this

```
% ax curl <user>/create/2020-06-01T16:30:00                                                                                                                                         (git)-[master]
{
    "timestamp": "2020-06-01T16:30:00",
    "user": "<user>",
    "build": "import",
    "joblist": [
        [
	    "csvimport",
	    "imp-0"
	]
    ],
    "deps": {},
    "caption": ""
}
```								    

What is returned here in pretty printed json is basically the urd
session object that is returned by `urd.latest()` and its siblings.



(If we want to see the latest entry there is a shortcut `ax curl <list>/latest`)




### How to use it

```python
def main(urd):
    impjob = urd.peek_latest('import').joblist[-1]
    # "imp" is now a jobid to the latest import job, use it for example like this
    urd.build('process', source=imp)
```

(Remember the urd session object shown in the json file earlier, what
we get is an urd session object, that has an attribute "joblist",
which contains jobids to all jobs in the session.  We fetch the last
(and only) job from the session.)

or, if we want to record a dependency into a new urd session in another list

```python
def main(urd):
    key = 'process'
    urd.begin(key)
    urditem = urd.latest('import')
    ts = urditem.timestamp
    impjob = urditem.joblist[-1]
    urd.build('process', source=impjob)
    urd.finish(key, ts)
```



- line 2 set the key for the urd-list to use.  This will be a unique
  identifier for this sequence of import jobs.

- line 3 fetches the _timestamp_ of the latest import job.  If this is
  the first run, the timestamp will be the string '0'.  (All valid
  timestamps in urd must be larger than '0'.)

- line 4 will iterate over all timestamps and filenames in the `files`
  list.

- line 5 ensures that we do something _only_ if the current timestamp
  is larger than the timestamp of the latest import.  
  For the first run, all timestamps will be larger than the string '0'
  and all files will be imported.  On consecutive runs, only files
  with newer timestamps added after the latest execution will be
  imported.

- lines 6 and 9 defines an urd _session_ for the current timestamp.

- line 7 fetches the jobid to the import job in the previous urd
  session.  If this is the first run, it's value will be `None`.
  

```
from datetime import datetime, timedelta

def main(urd):

        # a list of (ts, data), note that ts needs to be string for correct comparison later in the code
        tocreate = list((str(datetime(2020, 6, 1, 16, 30) + timedelta(days=ts)), "filename_%d.csv" % (ts,)) for ts in range(0, 10))

        createkey = 'create'
        appendkey = 'append'

        # When things are stable, use dedicated urd-users for various
        # tasks to avoid things being overwwitten by mistake.
        #
        # Insert "user:passwd" lines in ./urd.db/passwd
        # Run build script by "URD_AUTH=user:passwd ax run"
        #
        # createkey = '<importuser>/create'
        # appendkey = '<appenduser>/append'

        # Use truncate during development
        #
        urd.truncate(createkey, 0)
        urd.truncate(appendkey, 0)
        # Try this "urd.truncate(createkey, '2020-06-05')" and see what happens to _both_ create and append urd-lists.

        last_created = urd.peek_latest(createkey).timestamp
        print('last created', last_created)
        for ts, data in tocreate:
                if ts > last_created:
                        urd.begin(createkey, ts)
                        previous = urd.latest(createkey).joblist.get(-1)
                        urd.build('createds', data=data, previous=previous)
                        urd.finish(createkey)

        last_appended = urd.peek_latest(appendkey).timestamp
        for ts in urd.since(createkey, last_appended):
                if ts > last_appended:
                        urd.begin(appendkey, ts)
                        parent = urd.get(createkey, ts).joblist.get('createds')
                        previous = urd.latest(appendkey).joblist.get(-1)
                        urd.build('append', data='this is the time: %s' % (ts,), parent=parent, previous=previous)
                        urd.finish(appendkey)



```
